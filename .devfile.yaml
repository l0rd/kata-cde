schemaVersion: 2.2.0
metadata:
  name: inventory-quarkus
attributes:
  controller.devfile.io/storage-type: ephemeral
  pod-overrides:
    {
      "spec": { "runtimeClassName": "kata" },
      "metadata":
        { "annotations": { "io.kubernetes.cri-o.Devices": "/dev/fuse" } },
    }
  container-overrides: { "securityContext": { "privileged": true } }
components:
  - name: tools
    container:
      image: quay.io/podman/stable
      command: ["sleep"]
      args: ["infinity"]
      env:
        - name: QUARKUS_HTTP_HOST
          value: 0.0.0.0
      endpoints:
        - exposure: none
          name: debug
          protocol: tcp
          targetPort: 5005
        - exposure: none
          name: test
          protocol: http
          targetPort: 8081
        - exposure: public
          name: inventory
          protocol: http
          targetPort: 8080
          path: /api/inventory/100000
      memoryRequest: 5Mi
      memoryLimit: 6G
      cpuRequest: 1000m
      cpuLimit: 4000m
commands:
  - id: package
    exec:
      label: "1. Package"
      component: tools
      workingDir: ${PROJECTS_ROOT}/inventory-quarkus
      commandLine: "./mvnw clean package -DskipTests=true"
      group:
        kind: build
        isDefault: true
  - id: runtests
    exec:
      label: "2. Run Tests"
      component: tools
      workingDir: ${PROJECTS_ROOT}/inventory-quarkus
      commandLine: "./mvnw test"
      group:
        kind: test
  - id: startdev
    exec:
      label: "3. Start Development mode (Hot reload + debug)"
      component: tools
      workingDir: ${PROJECTS_ROOT}/inventory-quarkus
      commandLine: "./mvnw compile quarkus:dev"
      group:
        kind: run
        isDefault: true
  - id: buildimage
    exec:
      label: "4. Build Image"
      component: tools
      workingDir: ${PROJECT_SOURCE}
      commandLine: |
        # NAMESPACE=openshift
        NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
        IMAGE=image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/quarkus-api-example
        podman build -f src/main/docker/Dockerfile.jvm -t "${IMAGE}" .
      group:
        kind: build
  - id: pushimage
    exec:
      label: "5. Push Image"
      component: tools
      commandLine: |
        # Requires `oc policy add-role-to-user registry-editor <user_name> -n <namespace>`
        # NAMESPACE=openshift
        NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
        IMAGE=image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/quarkus-api-example
        podman login --tls-verify=false -u $(oc whoami) -p $(oc whoami -t) image-registry.openshift-image-registry.svc:5000
        podman push --tls-verify=false "${IMAGE}"
      group:
        kind: build
  - id: runpod
    exec:
      label: "6. Run Pod"
      component: tools
      commandLine: |
        # NAMESPACE=openshift
        NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
        IMAGE=image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/quarkus-api-example
        oc run inventory-quarkus --image "${IMAGE}" --port 8080
        oc expose pod/inventory-quarkus
        echo
        echo
        echo "You can now test the application running 'curl -sSL http://inventory-quarkus:8080/api/inventory/100000'"
      group:
        kind: build
  - id: deletepod
    exec:
      label: "7. Delete Pod"
      component: tools
      commandLine: |
        oc delete pod inventory-quarkus &&
        oc delete service inventory-quarkus
      group:
        kind: build
